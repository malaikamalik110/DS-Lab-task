#include <iostream>
using namespace std;


struct Node {
    int passengerID;
    Node* next;
    
    Node(int id) {
        passengerID = id;
        next = nullptr;
    }
};


class LinkedList {
private:
    Node* head;

public:
    LinkedList() {
        head = nullptr;
    }

    
    void insertAtBeginning(int id) {
        Node* newNode = new Node(id);
        newNode->next = head;
        head = newNode;
    }

    
    void insertAtEnd(int id) {
        Node* newNode = new Node(id);
        if (head == nullptr) {
            head = newNode;
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }
        temp->next = newNode;
    }

   
    void insertAtPosition(int id, int pos) {
        if (pos <= 1) {
            insertAtBeginning(id);
            return;
        }

        Node* newNode = new Node(id);
        Node* temp = head;
        for (int i = 1; i < pos - 1 && temp != nullptr; i++) {
            temp = temp->next;
        }

        if (temp == nullptr) {
            insertAtEnd(id);  
        } else {
            newNode->next = temp->next;
            temp->next = newNode;
        }
    }

    
    void deleteFromBeginning() {
        if (head == nullptr) {
            cout << "Queue is empty, no passenger to remove.\n";
            return;
        }
        Node* temp = head;
        head = head->next;
        delete temp;
    }

    
    void printQueue() {
        Node* temp = head;
        cout << "Current Queue: ";
        while (temp != nullptr) {
            cout << temp->passengerID << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};


int main() {
    LinkedList queue;

    
    cout << "Starting simulation...\n";

    
    queue.insertAtEnd(101);
    queue.insertAtEnd(102);
    queue.insertAtEnd(103);

    
    queue.insertAtBeginning(201);

   
    queue.insertAtPosition(301, 2);

    
    cout << "\nQueue after adding passengers:\n";
    queue.printQueue();

    
    queue.deleteFromBeginning();

    
    cout << "\nQueue after 1 passenger boards:\n";
    queue.printQueue();

    return 0;
}
